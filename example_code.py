# -*- coding: utf-8 -*-
"""Generative_Adversarial_Networks_PyTorch.ipynb

Automatically generated by Colaboratory.

## Setup Example
"""

import torch
import torch.nn as nn
import torch.optim as optim
from torch.autograd.variable import Variable
from torchvision import transforms
from torchvision.datasets import MNIST
from torchvision.utils import make_grid
from torch.utils.data import DataLoader
import imageio
...

"""## Dataset
To simplify, the PyTorch MNIST wrapper, which downloads and loads the MNIST dataset. See the [documentation](https://github.com/pytorch/vision/blob/master/torchvision/datasets/mnist.py) for more information about the interface. The default parameters will take 5,000 of the training examples and place them into a validation dataset. The data will be saved into a folder called `MNIST_data`.
"""

data = MNIST(root='./MNIST_data', train=True, download=True, transform=None)

"""## Random Noise
Generate uniform noise from -1 to 1 with shape `[batch_size, dim]`. Implement `sample_noise` Hint: use `torch.rand`. Make sure noise is the correct shape and type:
"""

def sample_noise(batch_size, dim): 
    return torch.rand(batch_size, dim) + torch.rand(batch_size, dim)*(-1)

"""# Discriminator
Our first step is to build a discriminator. Fill in the architecture: A three hidden-layer discriminative neural network.
 * Fully connected layer 
 * LeakyReLU 
 * Fully connected layer 
 * LeakyReLU 
 * Fully connected layer
"""

class DiscriminatorNet(torch.nn.Module):

    def __init__(self):
        super(DiscriminatorNet, self).__init__()  
        
        #why using 728 instead of 784 = 28x28?
        
        input_size = 728 #input value of flattened picture?
        output_size = 256  #value of output picture?
        
        #maybe use same multipicator for LeakyReLU
        self.firstHiddenLayer = nn.Sequential(
            nn.Linear(input_size, 512),
            nn.LeakyReLU(0.5), 
        )

        self.secondHiddenLayer = nn.Sequential(
            nn.Linear(512, 256),
            nn.LeakyReLU(0.5),
        )
            
        self.outputLayer = nn.Sequential(
            nn.Linear(256, output_size), #256 = value of output picture?
        )

    def forward(self, x):
      x = self.firstHiddenLayer(x)
      x = self.secondHiddenLayer(x)
      x = self.outputLayer(x)
      return x

"""# Generator
Similar like above:
 * Fully connected layer
 * `ReLU`
 * Fully connected layer
 * `ReLU`
 * Fully connected layer
 * `TanH` (to clip the image to be in the range of [-1,1])
"""

class GeneratorNet(torch.nn.Module):

    def __init__(self):
        super(GeneratorNet, self).__init__()
        n_features = 6000 #not sure what the correct value would be, is this how many photos we have?
        n_out = 784 #I think 784 is correct? 
        
        #all values will probably have to be replaced, I don't know how to check if this is correct
        self.hidden0 = nn.Sequential(
            nn.Linear(n_features, 256), 
            nn.LeakyReLU(0.2)
        )
        self.hidden1 = nn.Sequential(            
            nn.Linear(256, 512), 
            nn.LeakyReLU(0.2)
        )
        self.hidden2 = nn.Sequential(
            nn.Linear(512, 1024), 
            nn.LeakyReLU(0.2)
        )
        
        self.out = nn.Sequential(
            nn.Linear(1024, n_out),
            nn.Tanh()
        )

    def forward(self, x):
        x = self.hidden0(x)
        x = self.hidden1(x)
        x = self.hidden2(x)
        x = self.out(x)
        return x

"""# Optimization
Make a function that returns an `optim.Adam` optimizer
"""

# Optimizers
d_optimizer = optim.Adam(discriminator.parameters(), lr=0.0002) #lr=learning rate, maybe we can up it and see what happens
g_optimizer = optim.Adam(generator.parameters(), lr=0.0002)

# Loss function
loss = nn.BCELoss()

"""# Training a GAN!"""

def real_data_target(size):
    
    return data

def fake_data_target(size):

    return data

def train_discriminator(optimizer, real_data, fake_data):
    # Reset gradients
   
    # Train on Real Data
    # Calculate error and backpropagate

    # Train on Fake Data
    # Calculate error and backpropagate 
    # Update weights with gradients
    
    # Return error
    return 
def train_generator(optimizer, fake_data):
    # Reset gradients
    # Sample noise and generate fake data
    # Calculate error and backpropagate
    # Update weights with gradients
    # Return error
    return

logger = Logger(model_name='VGAN', data_name='MNIST')

for epoch in range(num_epochs):
    for n_batch, (real_batch,_) in enumerate(data_loader):

        # Train Discriminator
        # Generate fake data
        # Train D


        # Train Generator
        # Generate fake data
        # Train G
        # Log error

        # Model Checkpoints
        logger.save_models(generator, discriminator, epoch)
